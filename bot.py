# -*- coding: utf-8 -*-
"""
–ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω—ñ –ª–∏—Å—Ç–∏ -> Telegram
–í–æ–¥–æ—Ä–æ–∑–¥—ñ–ª –ø–æ ID (in-memory, –±–µ–∑ —Ñ–∞–π–ª—ñ–≤), safe-–≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑ —Ñ–æ–ª–±–µ–∫–æ–º –Ω–∞ —Ç–µ–∫—Å—Ç,
–∫–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –∞–≤—Ç–æ–ø–æ—á–∞—Ç–æ–∫ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ ID.

–ü–æ—Ç—Ä—ñ–±–Ω—ñ –ª–∏—à–µ —Ü—ñ ENV: B24_TOKEN, B24_TOKEN_USERS, TELEGRAM_TOKEN
(–∂–æ–¥–Ω–∏—Ö –Ω–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö/—Ñ–∞–π–ª—ñ–≤ –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ)
"""
import os
import time
import requests
import pandas as pd
from b24 import B24

# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–±–µ–∑ –Ω–æ–≤–∏—Ö ENV) =====
B24_DOMAIN = "ua.zvilnymo.com.ua"
B24_USER_ID = 596
ENTITY_TYPE_ID = 1042                         # —Å–º–∞—Ä—Ç-–ø—Ä–æ—Ü–µ—Å "–ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω—ñ –ª–∏—Å—Ç–∏"
TELEGRAM_CHAT_IDS = [-1002345888899]          # –∫—É–¥–∏ —à–ª–µ–º–æ
B24_TOKEN = os.environ.get("B24_TOKEN")
B24_TOKEN_USERS = os.environ.get("B24_TOKEN_USERS")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
DEBUG = bool(os.environ.get("DEBUG"))

FIELDS = [
    "ID",
    "title",
    "createdTime",
    "createdBy",
    "assignedById",
    "ufCrm11_1753374261",   # —Ç—ñ–ª–æ –∫—Ä–µ–¥–∏—Ç–∞
    "ufCrm11_1753374328",   # —Å—É–º–∞ –ø–∏—Å—å–º–∞/–∑–∞–∫—Ä–∏—Ç—Ç—è
    "ufCrm11_1753374357",   # –∫–æ–º–µ–Ω—Ç–∞—Ä
    "ufCrm11_1750708749"    # —Ñ–∞–π–ª-–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç
]

# ===== –£—Ç–∏–ª—ñ—Ç–∏ =====
def log(*a):
    if DEBUG:
        print(*a)

# ---- Telegram ----
def tg_send_message_safe(text, chat_ids) -> bool:
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    ok_any = False
    for chat_id in chat_ids:
        try:
            resp = requests.post(url, data={
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML",
                "disable_web_page_preview": True
            }, timeout=15)
            log("TG sendMessage:", resp.status_code, resp.text[:200])
            ok_any = ok_any or resp.ok
        except Exception as e:
            log("TG sendMessage exception:", e)
    return ok_any

def tg_send_photo_safe(photo_url, caption, chat_ids) -> bool:
    if not (photo_url and str(photo_url).startswith("http")):
        return False
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
    ok_any = False
    for chat_id in chat_ids:
        try:
            resp = requests.post(url, data={
                "chat_id": chat_id,
                "photo": photo_url,
                "caption": caption,
                "parse_mode": "HTML"
            }, timeout=20)
            log("TG sendPhoto:", resp.status_code, resp.text[:200])
            ok_any = ok_any or resp.ok
        except Exception as e:
            log("TG sendPhoto exception:", e)
    return ok_any

# ---- Bitrix24 ----
def load_users_dict(b24_users: B24):
    users = b24_users.get_list("user.get", select=["ID","NAME","LAST_NAME","SECOND_NAME"])
    df = pd.DataFrame(users or [])
    if df.empty: return {}
    df["FIO"] = (
        df[["LAST_NAME","NAME","SECOND_NAME"]]
        .fillna("").agg(" ".join, axis=1)
        .str.replace(r"\s+"," ", regex=True).str.strip()
    )
    out = {}
    for _, r in df.iterrows():
        uid = r.get("ID")
        fio = r.get("FIO") or r.get("NAME") or ""
        out[str(uid)] = fio
        try: out[int(uid)] = fio
        except Exception: pass
    return out

def fetch_user_name_by_id(uid, b24_users: B24):
    if uid in (None,"",0): return None
    try:
        data = b24_users.call("user.get", {"ID": uid})
        user = data[0] if isinstance(data, list) else data
    except Exception:
        user = None
    if not user:
        try:
            res = b24_users.get_list("user.search", FILTER={"ID": uid})
            user = res[0] if isinstance(res, list) and res else None
        except Exception:
            user = None
    if not user: return None
    last = (user.get("LAST_NAME") or "").strip()
    name = (user.get("NAME") or "").strip()
    mid  = (user.get("SECOND_NAME") or "").strip()
    fio = " ".join([last, name, mid]).replace("  "," ").strip()
    return fio or None

def resolve_creator_name(item, users_dict, b24_users: B24):
    raw_uid = (
        item.get("createdBy") or item.get("createdById")
        or item.get("CREATED_BY") or item.get("CREATED_BY_ID")
    )
    for key in (raw_uid, str(raw_uid)):
        if key in users_dict:
            return users_dict[key]
    fio = fetch_user_name_by_id(raw_uid, b24_users)
    if fio:
        users_dict[str(raw_uid)] = fio
        try: users_dict[int(raw_uid)] = fio
        except Exception: pass
        return fio
    return "–ù–µ–≤—ñ–¥–æ–º–æ"

def get_public_file_url(file_field, b24: B24):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∏–¥–∞—Ç–Ω–∏–π –¥–æ TG URL: url/downloadUrl/urlMachine.
    –Ø–∫—â–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî –≤–µ—Ä—Ç–∞—î None (—Ç–æ–¥—ñ —à–ª–µ–º–æ —Ç–µ–∫—Å—Ç).
    """
    node = None
    if isinstance(file_field, dict):
        node = file_field
    elif isinstance(file_field, list) and file_field and isinstance(file_field[0], dict):
        node = file_field[0]
    if not isinstance(node, dict):
        return None

    for k in ("url","downloadUrl","DOWNLOAD_URL","DOWNLOAD_URL_SIGN","urlMachine"):
        v = node.get(k)
        if v and str(v).startswith("http"):
            return v
    # (–±–µ–∑ disk.file.get ‚Äî —â–æ–± –Ω–µ —É—Å–∫–ª–∞–¥–Ω—é–≤–∞—Ç–∏)
    return None

def get_items_after_id(b24: B24, last_id: int):
    """
    –¢—è–≥–Ω–µ–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ ID > last_id (ASC). –ë–µ–∑ —Ñ–∞–π–ª—ñ–≤, –ø—Ä–æ—Å—Ç–æ in-memory watermark.
    """
    filter_params = {">id": int(last_id)}
    items = b24.get_list(
        "crm.item.list",
        entityTypeId=ENTITY_TYPE_ID,
        select=FIELDS,
        order={"id": "ASC"},
        b24_filter=filter_params,   # –¥—É–±–ª—é—î–º–æ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –æ–±–≥–æ—Ä—Ç–∫–∏
        filter=filter_params,
        start=0
    )
    if not isinstance(items, list):
        items = items.get("items", []) if isinstance(items, dict) else []
    return items

def get_current_max_id(b24: B24) -> int:
    """
    –†–∞–∑–æ–≤–æ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ –±–µ—Ä–µ–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π ID —É —Å–º–∞—Ä—Ç-–ø—Ä–æ—Ü–µ—Å—ñ.
    –¶–µ —ñ —î –ø–æ—á–∞—Ç–∫–æ–≤–∞ ¬´—Ç–æ—á–∫–∞ –≤—ñ–¥–ª—ñ–∫—É¬ª, —â–æ–± –Ω–µ —á—ñ–ø–∞—Ç–∏ —Å—Ç–∞—Ä—ñ –µ–ª–µ–º–µ–Ω—Ç–∏.
    """
    items = b24.get_list(
        "crm.item.list",
        entityTypeId=ENTITY_TYPE_ID,
        select=["ID"],
        order={"id": "DESC"},
        start=0
    )
    if isinstance(items, dict): items = items.get("items", [])
    if not items: return 0
    first = items[0]
    return int(first.get("ID") or first.get("id") or 0)

# ===== –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª =====
def main():
    if not all([B24_TOKEN, B24_TOKEN_USERS, TELEGRAM_TOKEN]):
        raise RuntimeError("ENV –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ: –ø–æ—Ç—Ä—ñ–±–Ω—ñ B24_TOKEN, B24_TOKEN_USERS, TELEGRAM_TOKEN.")

    b24 = B24(domain=B24_DOMAIN, user_id=B24_USER_ID, token=B24_TOKEN)
    b24_users = B24(domain=B24_DOMAIN, user_id=B24_USER_ID, token=B24_TOKEN_USERS)

    users_dict = load_users_dict(b24_users)
    users_last_refresh = pd.Timestamp.utcnow()

    # In-memory watermark: —Å—Ç–∞—Ä—Ç—É—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–∞–∫—Å–∏–º—É–º—É
    last_id = get_current_max_id(b24)
    log(f"[init] start from current max id = {last_id}")

    while True:
        try:
            # –†–∞–∑ –Ω–∞ 10 —Ö–≤ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            if (pd.Timestamp.utcnow() - users_last_refresh).total_seconds() > 600:
                try:
                    users_dict = load_users_dict(b24_users)
                    users_last_refresh = pd.Timestamp.utcnow()
                    log("[users] refreshed")
                except Exception as e:
                    log("[users] refresh failed:", e)

            # –¢—è–≥–Ω–µ–º–æ –Ω–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            items = get_items_after_id(b24, last_id)
            if not items:
                time.sleep(30)
                continue

            for item in items:
                item_id = int(item.get("ID") or item.get("id") or 0)
                if not item_id:
                    log("[WARN] bad item:", item)
                    continue

                title   = item.get("title", "-")
                body    = item.get("ufCrm11_1753374261", "-")
                amount  = item.get("ufCrm11_1753374328", "-")
                comment = item.get("ufCrm11_1753374357", "-")
                manager = resolve_creator_name(item, users_dict, b24_users)

                file_url = get_public_file_url(item.get("ufCrm11_1750708749"), b24)

                text = (
                    "üì© <b>–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–∏–π –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç!</b>\n\n"
                    f"üë§ <b>–ö—Ä–µ–¥–∏—Ç–æ—Ä / –ö–ª—ñ—î–Ω—Ç:</b> <i>{title}</i>\n"
                    f"üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> <b>{manager}</b>\n"
                    f"üí≥ <b>–¢—ñ–ª–æ –∫—Ä–µ–¥–∏—Ç—É:</b> <b>{body}</b>\n"
                    f"üí∞ <b>–°—É–º–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è:</b> <b>{amount}</b>\n"
                    f"üìù <b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> <i>{comment}</i>"
                )

                sent_ok = False
                if file_url:
                    sent_ok = tg_send_photo_safe(file_url, text, TELEGRAM_CHAT_IDS)
                    if not sent_ok and DEBUG:
                        log("Photo failed, fallback to text")

                if not sent_ok:
                    sent_ok = tg_send_message_safe(text, TELEGRAM_CHAT_IDS)

                # –ü—Ä–æ—Å—É–≤–∞—î–º–æ watermark —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ TG –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –≤—ñ–¥–ø—Ä–∞–≤–∫—É
                if sent_ok:
                    last_id = max(last_id, item_id)
                    log(f"[sent] id={item_id} ok; last_id -> {last_id}")
                else:
                    log(f"[WARN] TG not sent for id={item_id}; –Ω–µ –∑—Å—É–≤–∞—î–º–æ last_id")

            # –Ω–∞—Å—Ç—É–ø–Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è
            time.sleep(10)

        except Exception as e:
            log("[loop] exception:", e)
            time.sleep(10)

if __name__ == "__main__":
    main()
