# -*- coding: utf-8 -*-
import time
import requests
from b24 import B24
import pandas as pd
import os

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: –≤—Å—ñ —Å–µ–∫—Ä–µ—Ç–∏ –ª–∏—à–µ –∑ ENV ===
B24_DOMAIN = "ua.zvilnymo.com.ua"
B24_USER_ID = 596

# ID —Å–º–∞—Ä—Ç-–ø—Ä–æ—Ü–µ—Å—É "–ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω—ñ –ª–∏—Å—Ç–∏"
ENTITY_TYPE_ID = 1042

# –ö—É–¥–∏ —Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (Telegram chat IDs)
TELEGRAM_CHAT_IDS = [-1002345888899]

# –¢–æ–∫–µ–Ω–∏ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
B24_TOKEN = os.environ.get("B24_TOKEN")
B24_TOKEN_USERS = os.environ.get("B24_TOKEN_USERS")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# –û–ø—Ü—ñ–π–Ω–∏–π DEBUG (–±—É–¥—å-—è–∫–µ –Ω–µ–Ω—É–ª—å–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–º–∏–∫–∞—î –¥—Ä—É–∫)
DEBUG = bool(os.environ.get("DEBUG"))

# –ü–æ–ª—è, —è–∫—ñ —Ç—è–≥–Ω–µ–º–æ –∑ B24
FIELDS = [
    "ID",
    "title",
    "createdTime",
    "createdBy",                 # <- –¢–í–û–Ø –û–°–ù–û–í–ê: –º–µ–Ω–µ–¥–∂–µ—Ä = —Ç–æ–π, —Ö—Ç–æ —Å—Ç–≤–æ—Ä–∏–≤
    "assignedById",              # (–ø—Ä–æ –∑–∞–ø–∞—Å; –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏)
    "ufCrm11_1753374261",        # —Ç—ñ–ª–æ –∫—Ä–µ–¥–∏—Ç–∞
    "ufCrm11_1753374328",        # —Å—É–º–∞ –ø–∏—Å—å–º–∞
    "ufCrm11_1753374357",        # –∫–æ–º–µ–Ω—Ç–∞—Ä
    "ufCrm11_1750708749"         # —Ñ–∞–π–ª-–≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç
]

# -------------------- Telegram helpers --------------------
def send_telegram_message(text, chat_ids):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    for chat_id in chat_ids:
        try:
            resp = requests.post(
                url,
                data={
                    "chat_id": chat_id,
                    "text": text,
                    "parse_mode": "HTML",
                    "disable_web_page_preview": True
                },
                timeout=10
            )
            if DEBUG and not resp.ok:
                print("TG sendMessage error:", resp.text)
        except Exception as e:
            if DEBUG:
                print("TG sendMessage exception:", e)

def send_telegram_photo(photo_url, caption, chat_ids):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendPhoto"
    for chat_id in chat_ids:
        try:
            resp = requests.post(
                url,
                data={
                    "chat_id": chat_id,
                    "photo": photo_url,   # URL –∞–±–æ file_id
                    "caption": caption,
                    "parse_mode": "HTML"
                },
                timeout=15
            )
            if DEBUG and not resp.ok:
                print("TG sendPhoto error:", resp.text)
        except Exception as e:
            if DEBUG:
                print("TG sendPhoto exception:", e)

# -------------------- Bitrix24 helpers --------------------
def load_users_dict():
    """
    –†–∞–∑–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ -> dict –∑ –∫–ª—é—á–∞–º–∏ —ñ —è–∫ str, —ñ —è–∫ int.
    """
    b24_users = B24(domain=B24_DOMAIN, user_id=B24_USER_ID, token=B24_TOKEN_USERS)
    users = b24_users.get_list("user.get", select=["ID", "NAME", "LAST_NAME", "SECOND_NAME"])
    users_df = pd.DataFrame(users)
    if users_df.empty:
        return {}

    users_df["FIO"] = (
        users_df[["LAST_NAME", "NAME", "SECOND_NAME"]]
        .fillna('')
        .agg(' '.join, axis=1)
        .str.replace(r'\s+', ' ', regex=True)
        .str.strip()
    )

    users_dict = {}
    for _, row in users_df.iterrows():
        fio = row.get("FIO") or row.get("NAME") or ""
        uid_raw = row.get("ID")
        uid_str = str(uid_raw)
        users_dict[uid_str] = fio
        try:
            users_dict[int(uid_raw)] = fio
        except Exception:
            pass

    return users_dict

def fetch_user_name_by_id(uid, b24_users):
    """
    –û–Ω–ª–∞–π–Ω-–ø—ñ–¥—Ç—è–∂–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ ID (fallback, –∫–æ–ª–∏ –π–æ–≥–æ –Ω–µ –±—É–ª–æ –≤ –∫–µ—à—ñ).
    –ü–æ–≤–µ—Ä—Ç–∞—î FIO –∞–±–æ None.
    """
    if uid is None:
        return None

    user = None
    try:
        data = b24_users.call("user.get", {"ID": uid})
        user = data[0] if isinstance(data, list) else data
    except Exception:
        user = None

    if not user:
        try:
            res = b24_users.get_list("user.search", FILTER={"ID": uid})
            user = res[0] if isinstance(res, list) and res else None
        except Exception:
            user = None

    if not user:
        return None

    last = (user.get("LAST_NAME") or "").strip()
    name = (user.get("NAME") or "").strip()
    mid  = (user.get("SECOND_NAME") or "").strip()
    fio = " ".join([last, name, mid]).replace("  ", " ").strip()
    return fio or None

def resolve_creator_name(item, users_dict, b24_users):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä = —Ç–æ–π, —Ö—Ç–æ —Å—Ç–≤–æ—Ä–∏–≤ –µ–ª–µ–º–µ–Ω—Ç (createdBy).
    –Ø–∫—â–æ –Ω–µ–º–∞—î –≤ –∫–µ—à—ñ ‚Äî –æ–Ω–ª–∞–π–Ω –ø—ñ–¥—Ç—è–≥—É—î–º–æ —ñ –∫–µ—à—É—î–º–æ.
    """
    raw_uid = (
        item.get("createdBy")
        or item.get("createdById")
        or item.get("CREATED_BY")
        or item.get("CREATED_BY_ID")
    )

    # —Å–ø–µ—Ä—à—É —à—É–∫–∞—î–º–æ –≤ –∫–µ—à—ñ (—ñ int, —ñ str)
    for key in (raw_uid, str(raw_uid)):
        if key in users_dict:
            return users_dict[key]

    # —è–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ ‚Äî –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏–º–æ –æ–Ω–ª–∞–π–Ω–æ–º
    fio = fetch_user_name_by_id(raw_uid, b24_users)
    if fio:
        users_dict[str(raw_uid)] = fio
        try:
            users_dict[int(raw_uid)] = fio
        except Exception:
            pass
        return fio

    # –æ—Å—Ç–∞–Ω–Ω—ñ–π fallback ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏, —â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ ID –¥–ª—è –¥–µ–±–∞–≥—É)
    return "–ù–µ–≤—ñ–¥–æ–º–æ"

def get_new_items(b24, last_checked_iso):
    """
    –¢—è–≥–Ω–µ–º–æ –Ω–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —Å–º–∞—Ä—Ç-–ø—Ä–æ—Ü–µ—Å—É –∑–∞ createdTime >= last_checked_iso.
    """
    filter_params = {">=createdTime": last_checked_iso}
    items = b24.get_list(
        "crm.item.list",
        entityTypeId=ENTITY_TYPE_ID,
        select=FIELDS,
        b24_filter=filter_params  # –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ —É —Ç–≤–æ—î–º—É –∫–æ–¥—ñ
        # —è–∫—â–æ —Ç–≤–æ—è –æ–±–≥–æ—Ä—Ç–∫–∞ –æ—á—ñ–∫—É—î "filter", –º–æ–∂–Ω–∞ –¥—É–±–ª—é–≤–∞—Ç–∏:
        # filter=filter_params
    )
    if not isinstance(items, list):
        # –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –æ–±–≥–æ—Ä—Ç–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î dict –∑ –∫–ª—é—á–µ–º 'items'
        items = items.get("items", []) if isinstance(items, dict) else []
    return items

# -------------------- Main loop --------------------
def main():
    if not all([B24_TOKEN, B24_TOKEN_USERS, TELEGRAM_TOKEN]):
        raise RuntimeError("ENV –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ: –ø–æ—Ç—Ä—ñ–±–Ω—ñ B24_TOKEN, B24_TOKEN_USERS, TELEGRAM_TOKEN.")

    b24 = B24(domain=B24_DOMAIN, user_id=B24_USER_ID, token=B24_TOKEN)
    b24_users = B24(domain=B24_DOMAIN, user_id=B24_USER_ID, token=B24_TOKEN_USERS)

    users_dict = load_users_dict()
    users_last_refresh = pd.Timestamp.now()

    # –°—Ç–∞—Ä—Ç–æ–≤–µ –≤—ñ–∫–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ 5 —Ö–≤
    last_checked = pd.Timestamp.now() - pd.Timedelta("5min")
    sent_ids = set()

    while True:
        now = pd.Timestamp.now()

        # –ú'—è–∫–∏–π –∞–≤—Ç–æ-—Ä–µ—Ñ—Ä–µ—à –∫–µ—à—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ä–∞–∑ –Ω–∞ 10 —Ö–≤
        if (now - users_last_refresh).total_seconds() > 600:
            try:
                users_dict = load_users_dict()
                users_last_refresh = now
                if DEBUG:
                    print("[users] refreshed at", now)
            except Exception as e:
                if DEBUG:
                    print("[users] refresh failed:", e)

        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
        try:
            new_items = get_new_items(b24, last_checked.isoformat())
        except Exception as e:
            if DEBUG:
                print("crm.item.list error:", e)
            time.sleep(10)
            last_checked = now
            continue

        for item in new_items:
            item_id = item.get("ID") or item.get("id")
            if not item_id:
                if DEBUG:
                    print("Unknown item format:", item)
                continue
            if item_id in sent_ids:
                continue

            title  = item.get("title", "-")
            body   = item.get("ufCrm11_1753374261", "-")
            amount = item.get("ufCrm11_1753374328", "-")
            comment = item.get("ufCrm11_1753374357", "-")

            # –ú–µ–Ω–µ–¥–∂–µ—Ä = —Å—Ç–≤–æ—Ä—é–≤–∞—á –µ–ª–µ–º–µ–Ω—Ç–∞
            manager_name = resolve_creator_name(item, users_dict, b24_users)

            if DEBUG and manager_name == "–ù–µ–≤—ñ–¥–æ–º–æ":
                print("createdBy:", item.get("createdBy"), "-> manager not resolved")

            # --- —Ñ–∞–π–ª (–º–æ–∂–µ –±—É—Ç–∏ dict –∞–±–æ list[dict]) ---
            file_field = item.get("ufCrm11_1750708749")
            url_machine = None
            if isinstance(file_field, dict):
                url_machine = file_field.get("urlMachine")
            elif isinstance(file_field, list) and file_field and isinstance(file_field[0], dict):
                url_machine = file_field[0].get("urlMachine")

            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            text = (
                "üì© <b>–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–∏–π –≥–∞—Ä–∞–Ω—Ç—ñ–π–Ω–∏–π –ª–∏—Å—Ç!</b>\n\n"
                f"üë§ <b>–ö—Ä–µ–¥–∏—Ç–æ—Ä / –ö–ª—ñ—î–Ω—Ç:</b> <i>{title}</i>\n"
                f"üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> <b>{manager_name}</b>\n"
                f"üí≥ <b>–¢—ñ–ª–æ –∫—Ä–µ–¥–∏—Ç—É:</b> <b>{body}</b>\n"
                f"üí∞ <b>–°—É–º–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è:</b> <b>{amount}</b>\n"
                f"üìù <b>–ö–æ–º–µ–Ω—Ç–∞—Ä:</b> <i>{comment}</i>"
            )

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ: —Ñ–æ—Ç–æ —è–∫—â–æ —î –ª—ñ–Ω–∫, —ñ–Ω–∞–∫—à–µ —Ç–µ–∫—Å—Ç
            if url_machine and str(url_machine).startswith("http"):
                send_telegram_photo(url_machine, text, TELEGRAM_CHAT_IDS)
            else:
                send_telegram_message(text, TELEGRAM_CHAT_IDS)

            sent_ids.add(item_id)

        # –∑—Å—É–≤–∞—î–º–æ "–≤—ñ–∫–Ω–æ" –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        last_checked = now
        time.sleep(60)

if __name__ == "__main__":
    main()
